module Backends

module Gröbner
    abstract type Backend end
    struct Buchberger <: Backend end
    default = Buchberger()
    set_default()  = (global default; default=Buchberger())
    set_default(x) = (global default; default=x)

    import PolynomialRings: gröbner_basis, gröbner_transformation, monomialorder

    # fallback in case a backend only provides one, but not the other
    gröbner_basis(b::Backend, args...)         = gröbner_transformation(b, args...)[1]
    gröbner_transformation(::Backend, args...) = gröbner_transformation(Buchberger(), args...)

    # fallback in case a monomial order is not passed explicitly: choose it from G
    gröbner_basis(b::Backend, G::AbstractVector, args...) = gröbner_basis(b, monomialorder(eltype(G)), G, args...)
    gröbner_transformation(b::Backend, G::AbstractVector, args...) = gröbner_transformation(b, monomialorder(eltype(G)), G, args...)
    """
        basis, transformation = gröbner_transformation(polynomials)

    Return a Gröbner basis for the ideal generated by `polynomials`, together with a
    `transformation` that proves that each element in `basis` is in that ideal (i.e.
    `basis == transformation * polynomials`).
    """
    gröbner_transformation(G::AbstractVector, args...) = gröbner_transformation(default, G, args...)
    """
        basis = gröbner_basis(polynomials)

    Return a Gröbner basis for the ideal generated by `polynomials`.
    """
    gröbner_basis(G::AbstractVector, args...) = gröbner_basis(default, G, args...)
end

end
